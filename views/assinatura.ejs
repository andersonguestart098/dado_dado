<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body onload="init()">
<label for="quemrecebeu">Quem recebeu a nota fiscal ?</label>
  <br>
<select id="quemrecebeu">
  <option value=''></option>
      <option value='MANOEL'>MANOEL</option> 
      <option value='CRISTIANO DUARTE'>CRISTIANO DUARTE</option>
      <option value='DUDU'>DUDU</option>
      <option value='MAX'>MAX</option>
      <option value='DIEIMES'>DIEIMES</option>
      <option value='CRISTIANO S.'>MANOEL</option>
  
</select>
  <br>
  <label for="">NÃºmero das notas fiscais</label>
  <br><input type="text" id="numeronf">
  <br><br>
  
  
        <canvas id="can" width="450" height="150" style="position:absolute;top:10%;left:10%;border:2px solid;"></canvas>
        <img  id="canvasimg" style="position:absolute;top:10%;left:52%;">
        <input type="button" onclick="enviar(this, canvasimg)" value="Enviar">
<script type="text/javascript">
    function enviar(btn, canvas) {
        save()
        let obj = {
          src: canvas.src
        }
        fetch('https://projeto.andersonhenri15.repl.co/assinatura', {
            method: 'POST',
            headers: {"Content-type": "text/plain; charset=UTF-8"},
            body: JSON.stringify(obj)
        })
    }

    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var x = "black",
        y = 2;
    
    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;
    
        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        document.addEventListener("keypress", (e) => {
            e.key == "+" ? erase() : ""
        })
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);
    }
    
    function color(obj) {
        switch (obj.id) {
            case "green":
                x = "green";
                break;
            case "blue":
                x = "blue";
                break;
            case "red":
                x = "red";
                break;
            case "yellow":
                x = "yellow";
                break;
            case "orange":
                x = "orange";
                break;
            case "black":
                x = "black";
                break;
            case "white":
                x = "white";
                break;
        }
        if (x == "white") y = 14;
        else y = 2;
    
    }
    
    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }
    
    function erase() {
        var m = confirm("Deseja fazer isso mesmo?");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }
    let dataImage;
    function save() {
        document.getElementById("canvasimg").style.border = "2px solid";
        var dataImage = canvas.toDataURL();
        console.log(dataImage)
        document.getElementById("canvasimg").src = dataImage;
        document.getElementById("canvasimg").style.display = "inline";
    }
    
    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft;
            currY = e.clientY - canvas.offsetTop;
    
            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            save()
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft;
                currY = e.clientY - canvas.offsetTop;
                draw();
            }
        }
    }
    </script>
</body>
</html>   